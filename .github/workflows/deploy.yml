name: Deploy

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9.0.0"

jobs:
  # TODO: rm, add bcor err.
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  # deploy-contracts:
  #   name: Deploy Contracts
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
  #   environment:
  #     name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Scarb
  #       uses: software-mansion/setup-scarb@v1
  #       with:
  #         scarb-version: "2.6.4"

  #     - name: Setup Starknet Foundry
  #       uses: foundry-rs/setup-snfoundry@v3

  #     - name: Build contracts
  #       working-directory: apps/contracts
  #       run: scarb build

  #     - name: Deploy to StarkNet
  #       working-directory: apps/contracts
  #       env:
  #         STARKNET_PRIVATE_KEY: ${{ secrets.STARKNET_PRIVATE_KEY }}
  #         STARKNET_RPC_URL: ${{ secrets.STARKNET_RPC_URL }}
  #       run: |
  #         # Deploy contracts using Starknet Foundry
  #         echo "Deploying contracts to StarkNet..."
  #         # TODO: Add deployment script here

  # deploy-backend:
  #   name: Deploy Backend
  #   runs-on: ubuntu-latest
  #   needs: [deploy-contracts]
  #   environment:
  #     name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Build backend
  #       run: pnpm --filter backend build

  #     - name: Deploy to server
  #       env:
  #         DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  #         DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  #         DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
  #       run: |
  #         # TODO: Add deployment script here
  #         echo "Deploying backend to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}"

  # deploy-web:
  #   name: Deploy Web App
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Build web app
  #       run: pnpm --filter web build

  #     - name: Deploy to Vercel/Netlify
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  #       run: |
  #         # TODO: Add deployment script here
  #         echo "Deploying web app to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}"

  # deploy-landing:
  #   name: Deploy Landing Page
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Build landing page
  #       run: pnpm --filter landing build

  #     - name: Deploy to hosting service
  #       env:
  #         DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
  #       run: |
  #         # TODO: Add deployment script here
  #         echo "Deploying landing page to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}"
